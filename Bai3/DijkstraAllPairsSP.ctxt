#BlueJ class context
comment0.target=DijkstraAllPairsSP
comment0.text=\r\n\ \ The\ {@code\ DijkstraAllPairsSP}\ class\ represents\ a\ data\ type\ for\ solving\ the\r\n\ \ all-pairs\ shortest\ paths\ problem\ in\ edge-weighted\ digraphs\r\n\ \ where\ the\ edge\ weights\ are\ non-negative.\r\n\ \ <p>\r\n\ \ This\ implementation\ runs\ Dijkstra's\ algorithm\ from\ each\ vertex.\r\n\ \ The\ constructor\ takes\ &Theta;(<em>V</em>\ (<em>E</em>\ log\ <em>V</em>))\ time\r\n\ \ in\ the\ worst\ case,\ where\ <em>V</em>\ is\ the\ number\ of\ vertices\ and\r\n\ \ <em>E</em>\ is\ the\ number\ of\ edges.\r\n\ \ Each\ instance\ method\ takes\ &Theta;(1)\ time.\r\n\ \ It\ uses\ &Theta;(<em>V</em><sup>2</sup>)\ extra\ space\ (not\ including\ the\r\n\ \ edge-weighted\ digraph).\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\r\n\ \ see\ <a\ href\="https\://algs4.cs.princeton.edu/44sp">Section\ 4.4</a>\ of\r\n\ \ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=G
comment1.target=DijkstraAllPairsSP(EdgeWeightedDigraph)
comment1.text=\r\n\ Computes\ a\ shortest\ paths\ tree\ from\ each\ vertex\ to\ every\ other\ vertex\ in\r\n\ the\ edge-weighted\ digraph\ {@code\ G}.\r\n\ @param\ G\ the\ edge-weighted\ digraph\r\n\ @throws\ IllegalArgumentException\ if\ an\ edge\ weight\ is\ negative\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ s\ <\ V}\r\n
comment2.params=s\ t
comment2.target=java.lang.Iterable\ path(int,\ int)
comment2.text=\r\n\ Returns\ a\ shortest\ path\ from\ vertex\ {@code\ s}\ to\ vertex\ {@code\ t}.\r\n\ @param\ \ s\ the\ source\ vertex\r\n\ @param\ \ t\ the\ destination\ vertex\r\n\ @return\ a\ shortest\ path\ from\ vertex\ {@code\ s}\ to\ vertex\ {@code\ t}\r\n\ \ \ \ \ \ \ \ \ as\ an\ iterable\ of\ edges,\ and\ {@code\ null}\ if\ no\ such\ path\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ s\ <\ V}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ t\ <\ V}\r\n
comment3.params=s\ t
comment3.target=boolean\ hasPath(int,\ int)
comment3.text=\r\n\ Is\ there\ a\ path\ from\ the\ vertex\ {@code\ s}\ to\ vertex\ {@code\ t}?\r\n\ @param\ \ s\ the\ source\ vertex\r\n\ @param\ \ t\ the\ destination\ vertex\r\n\ @return\ {@code\ true}\ if\ there\ is\ a\ path\ from\ vertex\ {@code\ s}\r\n\ \ \ \ \ \ \ \ \ to\ vertex\ {@code\ t},\ and\ {@code\ false}\ otherwise\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ s\ <\ V}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ t\ <\ V}\r\n
comment4.params=s\ t
comment4.target=double\ dist(int,\ int)
comment4.text=\r\n\ Returns\ the\ length\ of\ a\ shortest\ path\ from\ vertex\ {@code\ s}\ to\ vertex\ {@code\ t}.\r\n\ @param\ \ s\ the\ source\ vertex\r\n\ @param\ \ t\ the\ destination\ vertex\r\n\ @return\ the\ length\ of\ a\ shortest\ path\ from\ vertex\ {@code\ s}\ to\ vertex\ {@code\ t};\r\n\ \ \ \ \ \ \ \ \ {@code\ Double.POSITIVE_INFINITY}\ if\ no\ such\ path\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ s\ <\ V}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ t\ <\ V}\r\n
comment5.params=v
comment5.target=void\ validateVertex(int)
comment6.params=args
comment6.target=void\ main(java.lang.String[])
comment6.text=\r\n\ Unit\ tests\ the\ {@code\ DijkstraAllPairsSP}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
numComments=7
