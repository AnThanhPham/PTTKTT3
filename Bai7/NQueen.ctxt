#BlueJ class context
comment0.target=NQueen
comment0.text=\r\n\ Write\ a\ description\ of\ class\ NQueen\ here.\r\n\r\n\ @author\ (your\ name)\r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=
comment1.target=NQueen()
comment10.params=args
comment10.target=void\ main(java.lang.String[])
comment2.params=n
comment2.target=NQueen(int)
comment3.params=board
comment3.target=void\ print(int[][])
comment4.params=board
comment4.target=void\ printByCol(int[][])
comment5.params=board
comment5.target=void\ printSolution(int[][])
comment5.text=A\ utility\ function\ to\ print\ solution
comment6.params=board\ row\ col
comment6.target=boolean\ isSafe(int[][],\ int,\ int)
comment6.text=\ A\ utility\ function\ to\ check\ if\ a\ queen\ can\ \ \r\n\ \ \ \ be\ placed\ on\ board[row][col].\ Note\ that\ this\ \ \r\n\ \ \ \ function\ is\ called\ when\ "col"\ queens\ are\ \ \r\n\ \ \ \ already\ placed\ in\ columns\ from\ 0\ to\ col\ -1.\ \ \r\n\ \ \ \ So\ we\ need\ to\ check\ only\ left\ side\ for\ \ \r\nattacking\ queens
comment7.params=board\ col
comment7.target=boolean\ solveNQUtil(int[][],\ int)
comment7.text=\ A\ recursive\ utility\ function\ \ \ \r\nto\ solve\ N\ Queen\ problem
comment8.params=
comment8.target=void\ inKetQua()
comment8.text=\ This\ function\ solves\ the\ N\ Queen\ problem\ using\ \ \r\n\ \ \ \ Backtracking.\ It\ mainly\ uses\ solveNQUtil()\ to\ \ \r\n\ \ \ \ solve\ the\ problem.\ It\ returns\ false\ if\ queens\ \ \r\n\ \ \ \ cannot\ be\ placed,\ otherwise\ return\ true\ and\ \ \r\n\ \ \ \ prints\ placement\ of\ queens\ in\ the\ form\ of\ 1s.\ \ \r\n\ \ \ \ Please\ note\ that\ there\ may\ be\ more\ than\ one\ \ \r\n\ \ \ \ solutions,\ this\ function\ prints\ one\ of\ the\ \ \r\nfeasible\ solutions.
comment9.params=
comment9.target=void\ inSoLuongKQ()
numComments=11
